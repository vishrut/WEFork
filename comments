comments
 void DecideAndOccupyHole(){
        //Called when another teammate has the ball
        //Decide if the player should support the ballholder by moving to an appropriate hole or not
        //Act as per the decision
        
        Vector BHPos;
        
        double buffer = 0.1;
        for(Unum i=1; i<=11; i++){
            if(mpAgent->GetWorldState().GetTeammate(i).IsKickable()&&(i!=mpAgent->GetSelfUnum())){
                BHPos = mpAgent->GetWorldState().GetTeammate(i).GetPos();
                break;
            }
        }
        BHPos = RoundToNearestHole(BHPos);

        Vector BHfrontup = Vector(BHPos.X()+10, BHPos.Y()-10);
        Vector BHbackup = Vector(BHPos.X()-10, BHPos.Y()-10);
        Vector BHfrontdown = Vector(BHPos.X()+10, BHPos.Y()+10);
        Vector BHbackdown = Vector(BHPos.X()-10, BHPos.Y()+10);

        Vector BHfronthor = Vector(BHPos.X()+20, BHPos.Y());
        Vector BHbackhor = Vector(BHPos.X()-20, BHPos.Y());
        Vector BHupvert = Vector(BHPos.X(), BHPos.Y()-20);
        Vector BHdownvert = Vector(BHPos.X(), BHPos.Y()+20);
        //if frontup&frontdown not occupied (+ other conditions), move there
        //TODO: Currently, it is possible that one player is expected to fill both the holes

        Unum FU, FD, BU, BD;
        Unum FH, BH, UV, DV;

        //&&BHfrontup.X()>=-45&&BHfrontup.X()<=45&&BHfrontup.Y()>=-25&&BHfrontup.Y()<=25

        FU = GetClosest(BHfrontup);
        if(FU==mpAgent->GetSelfUnum()&&BHfrontup.X()>=-45&&BHfrontup.X()<=45&&BHfrontup.Y()>=-25&&BHfrontup.Y()<=25){
            OccupyHole(BHfrontup);
            std::cout<<"Player "<<FU<<" occupying frontup"<<std::endl;
        }

        FD = GetClosestExcl1(BHfrontdown, FU);
        if(FD==mpAgent->GetSelfUnum()&&BHfrontdown.X()>=-45&&BHfrontdown.X()<=45&&BHfrontdown.Y()>=-25&&BHfrontdown.Y()<=25){
            OccupyHole(BHfrontdown);
            std::cout<<"Player "<<FD<<" occupying frontdown"<<std::endl;
        }

        FH = GetClosestExcl2(BHfronthor, FU, FD);
        if(FH==mpAgent->GetSelfUnum()&&BHfronthor.X()>=-45&&BHfronthor.X()<=45&&BHfronthor.Y()>=-25&&BHfronthor.Y()<=25){
            OccupyHole(BHfronthor);
            std::cout<<"Player "<<FH<<" occupying backdown"<<std::endl;
        }

        UV = GetClosestExcl3(BHupvert, FU, FD, FH);
        if(UV==mpAgent->GetSelfUnum()&&BHupvert.X()>=-45&&BHupvert.X()<=45&&BHupvert.Y()>=-25&&BHupvert.Y()<=25){
            OccupyHole(BHupvert);
            std::cout<<"Player "<<UV<<" occupying backdown"<<std::endl;
        }

        DV = GetClosestExcl4(BHdownvert, FU, FD, FH, UV);
        if(DV==mpAgent->GetSelfUnum()&&BHdownvert.X()>=-45&&BHdownvert.X()<=45&&BHdownvert.Y()>=-25&&BHdownvert.Y()<=25){
            OccupyHole(BHdownvert);
            std::cout<<"Player "<<DV<<" occupying backdown"<<std::endl;
        }

        BU = GetClosestExcl5(BHbackup, FU, FD, FH, UV, DV);
        if(BU==mpAgent->GetSelfUnum()&&BHbackup.X()>=-45&&BHbackup.X()<=45&&BHbackup.Y()>=-25&&BHbackup.Y()<=25){
            OccupyHole(BHbackup);
            std::cout<<"Player "<<BU<<" occupying backup"<<std::endl;
        }
        
        BD = GetClosestExcl6(BHbackdown, FU, FD, FH, UV, DV, BU);
        if(BD==mpAgent->GetSelfUnum()&&BHbackdown.X()>=-45&&BHbackdown.X()<=45&&BHbackdown.Y()>=-25&&BHbackdown.Y()<=25){
            OccupyHole(BHbackdown);
            std::cout<<"Player "<<BD<<" occupying backdown"<<std::endl;
        }


        BH = GetClosestExcl7(BHbackhor, FU, FD, FH, UV, DV, BU, BD);
        if(BH==mpAgent->GetSelfUnum()&&BHbackhor.X()>=-45&&BHbackhor.X()<=45&&BHbackhor.Y()>=-25&&BHbackhor.Y()<=25){
            OccupyHole(BHbackhor);
            std::cout<<"Player "<<BH<<" occupying backdown"<<std::endl;
        }


    }


    void DecideAndOccupyHole(Unum target){
        //Called when another teammate has the ball
        //Decide if the player should support the ballholder by moving to an appropriate hole or not
        //Act as per the decision
        
        Vector BHPos;
        
        double buffer = 0.3;
        
        if(target!=mpAgent->GetSelfUnum()){
            BHPos = mpAgent->GetWorldState().GetTeammate(target).GetPos();
        }
        else
            return;
        
        BHPos = RoundToNearestHole(BHPos);

        Vector BHfrontup = Vector(BHPos.X()+10, BHPos.Y()-10);
        Vector BHbackup = Vector(BHPos.X()-10, BHPos.Y()-10);
        Vector BHfrontdown = Vector(BHPos.X()+10, BHPos.Y()+10);
        Vector BHbackdown = Vector(BHPos.X()-10, BHPos.Y()+10);

        Vector BHfronthor = Vector(BHPos.X()+20, BHPos.Y());
        Vector BHbackhor = Vector(BHPos.X()-20, BHPos.Y());
        Vector BHupvert = Vector(BHPos.X(), BHPos.Y()-20);
        Vector BHdownvert = Vector(BHPos.X(), BHPos.Y()+20);
        //if frontup&frontdown not occupied (+ other conditions), move there
        //TODO: Currently, it is possible that one player is expected to fill both the holes

        Unum FU, FD, BU, BD;
        Unum FH, BH, UV, DV;

        //&&BHfrontup.X()>=-45&&BHfrontup.X()<=45&&BHfrontup.Y()>=-25&&BHfrontup.Y()<=25

        FU = GetClosest(BHfrontup);
        if(FU==mpAgent->GetSelfUnum()&&BHfrontup.X()>=-45&&BHfrontup.X()<=45&&BHfrontup.Y()>=-25&&BHfrontup.Y()<=25){
            OccupyHole(BHfrontup);
            std::cout<<"Player "<<FU<<" occupying frontup"<<std::endl;
        }

        FD = GetClosestExcl1(BHfrontdown, FU);
        if(FD==mpAgent->GetSelfUnum()&&BHfrontdown.X()>=-45&&BHfrontdown.X()<=45&&BHfrontdown.Y()>=-25&&BHfrontdown.Y()<=25){
            OccupyHole(BHfrontdown);
            std::cout<<"Player "<<FD<<" occupying frontdown"<<std::endl;
        }

        FH = GetClosestExcl2(BHfronthor, FU, FD);
        if(FH==mpAgent->GetSelfUnum()&&BHfronthor.X()>=-45&&BHfronthor.X()<=45&&BHfronthor.Y()>=-25&&BHfronthor.Y()<=25){
            OccupyHole(BHfronthor);
            std::cout<<"Player "<<FH<<" occupying backdown"<<std::endl;
        }

        UV = GetClosestExcl3(BHupvert, FU, FD, FH);
        if(UV==mpAgent->GetSelfUnum()&&BHupvert.X()>=-45&&BHupvert.X()<=45&&BHupvert.Y()>=-25&&BHupvert.Y()<=25){
            OccupyHole(BHupvert);
            std::cout<<"Player "<<UV<<" occupying backdown"<<std::endl;
        }

        DV = GetClosestExcl4(BHdownvert, FU, FD, FH, UV);
        if(DV==mpAgent->GetSelfUnum()&&BHdownvert.X()>=-45&&BHdownvert.X()<=45&&BHdownvert.Y()>=-25&&BHdownvert.Y()<=25){
            OccupyHole(BHdownvert);
            std::cout<<"Player "<<DV<<" occupying backdown"<<std::endl;
        }

        BU = GetClosestExcl5(BHbackup, FU, FD, FH, UV, DV);
        if(BU==mpAgent->GetSelfUnum()&&BHbackup.X()>=-45&&BHbackup.X()<=45&&BHbackup.Y()>=-25&&BHbackup.Y()<=25){
            OccupyHole(BHbackup);
            std::cout<<"Player "<<BU<<" occupying backup"<<std::endl;
        }
        
        BD = GetClosestExcl6(BHbackdown, FU, FD, FH, UV, DV, BU);
        if(BD==mpAgent->GetSelfUnum()&&BHbackdown.X()>=-45&&BHbackdown.X()<=45&&BHbackdown.Y()>=-25&&BHbackdown.Y()<=25){
            OccupyHole(BHbackdown);
            std::cout<<"Player "<<BD<<" occupying backdown"<<std::endl;
        }


        BH = GetClosestExcl7(BHbackhor, FU, FD, FH, UV, DV, BU, BD);
        if(BH==mpAgent->GetSelfUnum()&&BHbackhor.X()>=-45&&BHbackhor.X()<=45&&BHbackhor.Y()>=-25&&BHbackhor.Y()<=25){
            OccupyHole(BHbackhor);
            std::cout<<"Player "<<BH<<" occupying backdown"<<std::endl;
        }
    }





        /*
        if(!IsOccupied(BHfrontup)||!IsOccupied(BHfrontdown)){
            //&&mpAgent->GetSelfUnum()!=10
            //if closest to frontup/frontdown, occupy it
            if(IsClosest(BHfrontup)&&!IsOccupied(BHfrontup)){
                OccupyHole(RoundToNearestHole(BHfrontup));
                return;
            }
            else if(IsClosest(BHfrontdown)&&!IsOccupied(BHfrontdown)){
                OccupyHole(RoundToNearestHole(BHfrontdown));
                return;
            }
        }
        
        if(!IsOccupied(BHbackup)||!IsOccupied(BHbackdown)){
            //&&mpAgent->GetSelfUnum()==10    
            //if closest to frontup/frontdown, occupy it
            if(IsClosest(BHbackup)&&!IsOccupied(BHbackup)){
                OccupyHole(RoundToNearestHole(BHbackup));
                return;
            }
            else if(IsClosest(BHbackdown)&&!IsOccupied(BHbackdown)){
                OccupyHole(RoundToNearestHole(BHbackdown));
                return;
            }
        }
        */
            /*
            if(mpAgent->GetSelfUnum()!=10){
                ActiveBehavior beh = ActiveBehavior(*mpAgent, BT_Hold);

                if (beh.GetType() != BT_None) {
                    std::cout<<"Behavior recvd"<<std::endl;
                    mpAgent->SetActiveBehaviorInAct(beh.GetType());
                    if(beh.Execute())
                        std::cout<<"Behavior executed"<<std::endl;
                }
            }
            
            else{
                RoundToNearestHole(myPosition);
                std::cout<<"Ball kickable - "<<mpAgent->GetSelfUnum()<<std::endl;
                Unum mpClosestPlayer = mpCurrentPositionInfo.GetClosestTeammateToPlayer(mpAgent->GetSelfUnum());          

                std::cout<<"Closest player - "<<mpClosestPlayer<<std::endl;
                Vector target_pos = mpAgent->GetWorldState().GetTeammate(mpClosestPlayer).GetPos();
                std::cout<<"Target player pos - "<< target_pos <<std::endl;

                if(Kicker::instance().KickBall(*mpAgent, target_pos, ServerParam::instance().ballSpeedMax()/2, KM_Hard, 0, false))
                    std::cout <<"Kick successful"<<std::endl;
            }
            */
            
            /*
            if(mpAgent->GetSelfUnum()==1)
                mpClosestPlayer=3;
            elseif(mpAgent->GetSelfUnum()==3)
                mpClosestPlayer=4;
            elseif(mpAgent->GetSelfUnum()==4)
                mpClosestPlayer=8;
            elseif(mpAgent->GetSelfUnum()==8)
                mpClosestPlayer=10;
            elseif(mpAgent->GetSelfUnum()==10)
                mpClosestPlayer=7;
            elseif(mpAgent->GetSelfUnum()==7)
                mpClosestPlayer=4;
            elseif(mpAgent->GetSelfUnum()==2)
                mpClosestPlayer=4;
            elseif(mpAgent->GetSelfUnum()==5)
                mpClosestPlayer=4;
            elseif(mpAgent->GetSelfUnum()==6)
                mpClosestPlayer=8;
            elseif(mpAgent->GetSelfUnum()==9)
                mpClosestPlayer=7;
            elseif(mpAgent->GetSelfUnum()==11)
                mpClosestPlayer=8;
            */    

            //Vector a = goalie_pos 
            //Vector b = mpAgent->GetSelf().GetPos();
            //double abangle = (a-b).Dir();
            //double Kickanglez = abangle;
            //if(Kickanglez>180)
            //    Kickanglez = Kickanglez-360;
            //if(Kickanglez<-180)
            //    Kickanglez = Kickanglez+360;
            //std::cout<<"Kickangle - "<< Kickanglez <<std::endl;
            

                        
            //Vector a = target_pos 
            //Vector b = mpAgent->GetSelf().GetPos();
            //double playerangle = mpAgent->GetSelf().GetBodyDir();
            //std::cout<<"My pos - "<< b <<std::endl;
            //double abangle = (a-b).Dir();
            //std::cout<<"Target dir - "<< abangle <<std::endl;
            //double Kickanglez = abangle-playerangle;
            //if(Kickanglez>180)
            //    Kickanglez = Kickanglez-360;
            //if(Kickanglez<-180)
            //    Kickanglez = Kickanglez+360;
            //std::cout<<"Kickangle - "<< Kickanglez <<std::endl;
            //body dir + kickangle = targetdir

            //Vector a1 = mpAgent->GetWorldState().GetTeammate(9).GetPos();
            //Vector c1 = mpAgent->GetWorldState().GetTeammate(11).GetPos();
            
            //std::cout<<"player 9 pos - "<< a1 <<std::endl;
            //Vector b1 = mpAgent->GetSelf().GetPos();
            //double playerangle1 = mpAgent->GetSelf().GetBodyDir();
            //std::cout<<"My pos - "<< b <<std::endl;
            //double abangle1 = (a1-b).Dir();
            //double abangle2 = (c1-b).Dir();
            
            //std::cout<<"topdir - "<< abangle1 <<std::endl;
            //std::cout<<"downdir - "<< abangle2 <<std::endl;
            //std::cout<<"bodydir - "<< playerangle <<std::endl;
            //double mpAngle = (mpAgent->GetWorldState().Teammate(mpClosestPlayer).GetPos()-mpAgent->GetSelf().GetPos()).Dir();
    		//std::cout<<"Angle to closest player - "<<mpObserver->Teammate(mpClosestPlayer).Dir()<<std::endl;
    		//mpAgent->Turn(Kickanglez);
    		//std::cout<<"Angle to closest player - "<<mpObserver->Teammate(mpClosestPlayer).Dir()<<std::endl;
    		//mpAgent->Kick(100, Kickanglez);